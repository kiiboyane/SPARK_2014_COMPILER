#ifndef ANALYSEUR_LEXICAL_V0_INCLUDED

#define ANALYSEUR_LEXICAL_V0_INCLUDED



typedef enum TOKENS
{
PROCEDURE_TOKEN  = 1000,
IN_TOKEN          = 1001,
OUT_TOKEN        = 1002,
WITH_TOKEN       = 1003,
GLOBAL_TOKEN     = 1004,
DEPENDS_TOKEN   = 1005,
NUM_TOKEN = 1006,
PRE_TOKEN  = 1007,
POST_TOKEN = 1008,
INTEGER_TOKEN = 1009,
BEGIN_TOKEN = 1010,
END_TOKEN = 1011,
OLD_TOKEN = 1012,
PV_TOKEN  = 1013,
LAST_TOKEN = 1014,
RETURN_TOKEN = 1015,
FUNCTION_TOKEN = 1016,
IS_TOKEN = 1017,
CONSTANT_TOKEN = 1018,
PLUS_TOKEN = 1019,
AFF_TOKEN = 1020,
EG_TOKEN = 1021,
PO_TOKEN = 1022,
PF_TOKEN = 1023,
P_TOKEN  = 1024,
PT_TOKEN = 1025,
NULL_TOKEN = 1026,
PACKAGE_TOKEN = 1027,
BODY_TOKEN  = 1028,
COMS_TOKEN = 1029,
NATURAL_TOKEN = 1030,
AND_TOKEN  = 1031,
OR_TOKEN  = 1032,
SPARK_MODE_TOKEN = 1033,
PRAGMA_TOKEN  = 1034,
ASSERT_TOKEN = 1035,
TYPF_TOKEN = 1036,
NEW_TOKEN =1037,
PRIVATE_TOKEN = 1038,
ARRAY_TOKEN = 1039,
OF_TOKEN = 1040,
OFF_TOKEN = 1041,
POSITIVE_TOKEN = 1042,
RECORD_TOKEN = 1043,
FIRST_TOKEN = 1044,
RANGE_TOKEN = 1045,
SUBTYPE = 1046,
RAISE_TOKEN = 1047,
LOOP_TOKEN = 1048,
THEN_TOKEN = 1049,
IF_TOKEN = 1050,
EXCEPTION_TOKEN = 1051,
V_TOKEN = 1052,
STRING_TOKEN = 1053,
CHARACTER_TOKEN = 1054,
INF_TOKEN = 1055,
SUP_TOKEN = 1056,
DIFF_TOKEN =1057,
IMP_TOKEN =1058,
FOR_TOKEN  =1059,
ERREUR_TOKEN =1060,
REVERSE_TOKEN =1061,
INFEG_TOKEN =1062,
SUPEG_TOKEN =1063,
WHILE_TOKEN =1064,
PUT_TOKEN =1065,
GET_TOKEN =1066,
ID_TOKEN = 1067,
COMMENTAIRE_TOKEN = 1068,
EOF_TOKEN = 1069,
MOINS_TOKEN = 1070,
MUL_TOKEN = 1071,
DIV_TOKEN = 1072, 
ON_TOKEN = 1073 , 
AP_TOKEN = 1074 

}TOKENS;

typedef  struct {
    TOKENS CODE; char NOM[100];
}Token_sym_Cour;



typedef enum CODES_ERREURS{
    ERR_CAR_INC,ERR_FICH_VID, 
    ERR_ID_LONG,ERR_COMM,
    ERR_AFFEC,
    ERR_CONSTS,ERR_ECRIRE,
    ERR_FACT,ERR_INST,
    ERR_INSTS,ERR_LIRE,
    ERR_PROGRAM,ERR_ID_PROCEDURE,ERR_PROCEDURE,ERR_IS,
    ERR_BEGIN,ERR_END,ERR_PV,ERR_PF,ERR_ARGS,
    ERR_COND,ERR_SEM,ERR_VARS,ERR_PO,ERR_P,TYPE_ERR,MODE_ERR,ERR_IMP,
    SPARK_MODE_ERR,ERR_NULL,DEC_ERR,ERR_CHARACTER,ERR_AP,INSTRUCTION_ERR,
    ERR_LOOP,ERR_IN,ERR_PT,ERR_THEN,ERR_IF,CONDITION_ERR
}CODES_ERREURS;


typedef  struct{
    CODES_ERREURS CODE_ERR; char message[100];
}Erreurs;





// Variables Globales

char car_Cour;                  //caract√®re courant
Token_sym_Cour sym_Cour;                //symbole courant
FILE* fichier;
extern Erreurs MES_ERR[100];

void afficherToken () ; 
void sym_Suiv() ; 
void Gen_Erreur(CODES_ERREURS  ERR);
void lireCar();
void lireMot();

#endif